using System.Data.SqlClient;
using VolleyballCompetitionApp.Interfaces.DTOs;
using VolleyballCompetitionApp.Interfaces.RepositoryInterfaces;

namespace VolleyballCompetitionApp.Repository
{
    public class PlayerRepository : IPlayerRepository
    {
        private readonly string _connectionString;

        public PlayerRepository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public int Create(int teamId, string name) // returns an int because the integer will be auto generated by the database so when you create the row you will be able to know what the id is
        {// the dto parameter shouldnt have a id yet (aka default int value) because the database will decide what the value will be
         // database connection and data uploading 
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Insert into Player (Name, TeamID) " +
                "Output Inserted.ID " +
                "Values (@name, @teamId)";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("name", name);
            command.Parameters.AddWithValue("teamId", teamId);
            connection.Open();
            int id = (int)command.ExecuteScalar();
            connection.Close();
            // no error's? return auto generated id (int)
            return id;
        }

        #region Find Methods
        public PlayerDTO FindById(int id) // gets data from the database depending on the id
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "select Name, TeamID " +
                "From Player " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("id", id);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            PlayerDTO dto = null;
            if (reader.Read())
            {
                dto = new PlayerDTO()
                {
                    Name = reader["Name"].ToString(),
                    TeamId = int.Parse(reader["TeamID"].ToString()),
                    Id = id
                };
            }
            connection.Close();

            // no error's? return filled dto.
            return dto;
        }

        public List<PlayerDTO> FindByTeamId(int teamId) // gets data from the database depending on the id
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "select Name, ID " +
                "From Player " +
                "Where TeamID = @teamId";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("teamId", teamId);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            List<PlayerDTO> dtos = new List<PlayerDTO>();
            while (reader.Read())
            {
                dtos.Add(new PlayerDTO()
                {
                    Name = reader["Name"].ToString(),
                    TeamId = teamId,
                    Id = int.Parse(reader["ID"].ToString())
                });
            }
            connection.Close();

            // no error's? return filled dto.
            return dtos;
        }

        public List<PlayerDTO> FindByClubId(int clubId)
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Select Player.ID, TeamID, Player.Name " +
                "From Player " +
                "Inner join Team on Team.ID = Player.TeamID"  +
                "Where ClubID = @clubId";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("clubId", clubId);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            List<PlayerDTO> dtos = new List<PlayerDTO>();
            while (reader.Read())
            {
                dtos.Add(new PlayerDTO()
                {
                    Name = reader["Name"].ToString(),
                    TeamId = int.Parse(reader["TeamID"].ToString()),
                    Id = int.Parse(reader["ID"].ToString())
                });
            }
            connection.Close();

            // no error's? return filled dto.
            return dtos;
        }
        #endregion

        public void Update(int id, int teamId, string name) // uses dto.id to dicate to what row it alters then alters that row
        {
            // dto validation (does it have all variable's filled etc?)
            if (name.Length > 255) throw new ArgumentException("Name can't be longer than 255.");
            if (id < 1) throw new ArgumentException("Invalid id");
            if (teamId < 1) throw new ArgumentException("Invalid team id");

            // database connection and data uploading/dating
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Update Player " +
                "Set Name = @name, TeamID = @teamId " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("name", name);
            command.Parameters.AddWithValue("id", id);
            command.Parameters.AddWithValue("teamId", teamId);
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }

        public void Delete(int id)
        {
            // database connection and data deletion
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Delete From Player " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("id", id);
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }

        public void DeleteByTeamId(int teamId)
        {
            // database connection and data deletion
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Delete From Player " +
                "Where TeamID = @teamId";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("teamId", teamId);
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }

        public List<PlayerDTO> GetAllPlayers()
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "select ID, Name, TeamID " +
                "From Player";
            SqlCommand command = new SqlCommand(query, connection);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            List<PlayerDTO> dtos = new List<PlayerDTO>();
            while (reader.Read())
            {
                dtos.Add(new PlayerDTO()
                {
                    Name = reader["Name"].ToString(),
                    TeamId = int.Parse(reader["TeamID"].ToString()),
                    Id = int.Parse(reader["ID"].ToString())
                });
            }
            connection.Close();

            // no error's? return filled dto.
            return dtos;
        }
    }
}
