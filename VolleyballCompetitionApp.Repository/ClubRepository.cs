using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VolleyballCompetitionApp.Repository.DTOs;
using System.Data.SqlClient;
using System.Reflection;
using System.Xml.Linq;

namespace VolleyballCompetitionApp.Repository
{
	public class ClubRepository
	{
		private readonly string _connectionString;

		public ClubRepository(string connectionString) => _connectionString = connectionString;

		public int Create(ClubDTO dto) // returns an int because the integer will be auto generated by the database so when you create the row you will be able to know what the id is
		{// the dto parameter shouldnt have a id yet (aka default int value) because the database will decide what the value will be
			// database connection, data uploading and fetching new id
			SqlConnection connection = new SqlConnection(_connectionString);
			string query = "" +
				"Insert Club " +
				"Values (@name); " +
				"SELECT @@IDENTITY AS [@@IDENTITY]; " +
				"GO";
			SqlCommand command = new SqlCommand(query, connection);
			command.Parameters.AddWithValue("name", dto.Name);
			connection.Open();
			int id = (int)command.ExecuteScalar();
			connection.Close();
			// no error's? return auto generated id (int)
			return id;
		}

		#region Find Methods
		public ClubDTO FindById(int id) // gets data from the database depending on the id
		{
			// database connection and data fetching
			SqlConnection connection = new SqlConnection(_connectionString);
			string query = "" +
				"select ID, Name " +
				"From Club " +
				"Where ID = @id";
			SqlCommand command = new SqlCommand(query, connection);
			command.Parameters.AddWithValue("id", id);
			connection.Open();
			SqlDataReader reader = command.ExecuteReader();
			reader.Read();
			ClubDTO dto = new ClubDTO()
			{
				Name = reader["Name"].ToString(),
				Id = id
			};
			connection.Close();

			// no error's? return filled dto.
			return dto;
		}

		#endregion

		public void Update(ClubDTO dto) // uses dto.id to dicate to what row it alters then alters that row
		{
			// dto validation (does it have all variable's filled etc?)
			if (dto.Name.Length > 255) throw new ArgumentException("Name can't be longer than 255.");
			if (dto.Id < 1) throw new ArgumentException("Invalid id");

			// database connection and data uploading/dating
			SqlConnection connection = new SqlConnection(_connectionString);
			string query = "" +
				"Update Club " +
				"Set Name = @name" +
				"Where ID = @id";
			SqlCommand command = new SqlCommand(query, connection);
			command.Parameters.AddWithValue("name", dto.Name);
			command.Parameters.AddWithValue("id", dto.Id);
			connection.Open();
			command.ExecuteNonQuery();
			connection.Close();
		}

		public void Delete(int id)
		{
			// database connection and data deletion
			SqlConnection connection = new SqlConnection(_connectionString);
			string query = "" +
				"Delete From Club " +
				"Where ID = @id";
			SqlCommand command = new SqlCommand(query, connection);
			command.Parameters.AddWithValue("id", id);
			connection.Open();
			command.ExecuteNonQuery();
			connection.Close();

		}
	}
}
