using System.Data.SqlClient;
using VolleyballCompetitionApp.Interfaces.RepositoryInterfaces;
using VolleyballCompetitionApp.Interfaces.DTOs;

namespace VolleyballCompetitionApp.Repository
{
    public class ClubRepository : IClubRepository
    {
        private readonly string _connectionString;

        public ClubRepository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public int Create(string name) // returns an int because the integer will be auto generated by the database so when you create the row you will be able to know what the id is
        {// the dto parameter shouldnt have a id yet (aka default int value) because the database will decide what the value will be
         // database connection, data uploading and fetching new id
            SqlConnection connection = new SqlConnection(_connectionString);
            string query =
                "Insert into Club (Name) " +
                "Output Inserted.ID " +
                "Values (@name)";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("name", name);
            connection.Open();
            int id = (int)command.ExecuteScalar();
            connection.Close();
            // no error's? return auto generated id (int)
            return id;
        }

        #region Get Methods
        public ClubDTO FindById(int id) // gets data from the database depending on the id
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "select Name " +
                "From Club " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("id", id);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            ClubDTO dto = null;
            if (reader.Read())
            {
                dto = new ClubDTO()
                {
                    Name = reader["Name"].ToString(),
                    Id = id
                };
            }
            connection.Close();

            // no error's? return filled dto.
            return dto;
        }

        public List<ClubDTO> GetAllClubs()
        {
            // database connection and data fetching
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "select ID, Name " +
                "From Club";
            SqlCommand command = new SqlCommand(query, connection);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            List<ClubDTO> dtos = new List<ClubDTO>();
            while (reader.Read())
            {
                dtos.Add(new ClubDTO()
                {
                    Name = reader["Name"].ToString(),
                    Id = int.Parse(reader["Id"].ToString())
                });
            }
            connection.Close();

            // no error's? return filled dto.
            return dtos;
        }

        #endregion

        public void Update(int id, string name) // uses dto.id to dicate to what row it alters then alters that row
        {
            // dto validation (does it have all variable's filled etc?)
            if (name.Length > 255)
            {
                throw new ArgumentException("Name can't be longer than 255.");
            }
            if (id < 1)
            {
                throw new ArgumentException("Invalid id");
            }

            // database connection and data uploading/dating
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Update Club " +
                "Set Name = @name " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("name", name);
            command.Parameters.AddWithValue("id", id);
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }

        public void Delete(int id)
        {
            // database connection and data deletion
            SqlConnection connection = new SqlConnection(_connectionString);
            string query = "" +
                "Delete From Club " +
                "Where ID = @id";
            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("id", id);
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }
    }
}